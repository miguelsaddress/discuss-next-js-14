
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                  String  @id @default(cuid())
  userId              String  @map(name: "user_id")
  type                String
  provider            String
  providerAccountId   String  @map(name: "provider_account_id")
  refreshToken        String? @map(name: "refresh_token")
  access_token        String? @map(name: "access_token") // needs to be snake_cased
  expiresAt           Int?    @map(name: "expires_at")
  token_type          String? @map(name: "token_type") // needs to be snake_cased
  scope               String?
  idToken             String? @map(name: "id_token")
  sessionState        String? @map(name: "session_state")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt      @map(name: "updated_at")


  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique  @map(name: "session_token")
  userId        String            @map(name: "user_id")
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime? @map(name: "email_verified_at")
  image             String?

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt      @map(name: "updated_at")

  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  comments          Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Topic {
  id          String @id @default(cuid())
  slug        String @unique
  description String
  posts       Post[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt      @map(name: "updated_at")
}

model Post {
  id      String      @id @default(cuid())
  title   String
  content String
  userId  String     @map(name: "user_id")
  topicId String     @map(name: "topic_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt      @map(name: "updated_at")

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic    Topic      @relation(fields: [topicId], references: [id])
  comments Comment[]
}

model Comment {
  id          String  @id @default(cuid())
  content     String
  postId     String  @map(name: "post_id")
  userId     String  @map(name: "user_id")
  parentId   String? @map(name: "parent_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  parent   Comment?  @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  children Comment[] @relation("Comments")
}
