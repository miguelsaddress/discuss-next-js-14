
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                  String  @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt


  user                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  email_verified_at DateTime?
  image             String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  accounts          Account[]
  sessions          Session[]
  posts             Post[]
  comments          Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Topic {
  id          String @id @default(cuid())
  slug        String @unique
  description String
  posts       Post[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Post {
  id      String      @id @default(cuid())
  title   String
  content String
  user_id  String
  topic_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user     User       @relation(fields: [user_id], references: [id], onDelete: Cascade)
  topic    Topic      @relation(fields: [topic_id], references: [id])
  comments Comment[]
}

model Comment {
  id          String  @id @default(cuid())
  content     String
  post_id     String
  user_id     String
  parent_id   String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  parent   Comment?  @relation("Comments", fields: [parent_id], references: [id], onDelete: Cascade)
  post     Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  children Comment[] @relation("Comments")
}
